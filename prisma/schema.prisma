// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Users {
  id        String      @id @default(uuid())
  firstName String
  lastName  String
  email     String      @unique
  password  String
  UserRoles UserRoles[]
  ClientAppointments Appointments[] @relation("clientAppointments")
  ProviderAppointments Appointments[] @relation("providerAppointments")
  AppointmentInvoices AppointmentInvoices[]
  SenderMessages Messages[] @relation("senderMessage")
  ReceiverMessages Messages[] @relation("receiverMessage")
}

model UserRoles {
  id      String @id @default(uuid())
  users   Users  @relation(fields: [usersId], references: [id])
  usersId String
  roles   Roles  @relation(fields: [rolesId], references: [id])
  rolesId String

  @@unique(fields: [usersId, rolesId], map: "userRoleCompositeKey")
}

model Roles {
  id        String      @id @default(uuid())
  role      String      @unique
  UserRoles UserRoles[]
}

model Appointments {
  id String @id @default(uuid())
  clients Users? @relation("clientAppointments",fields: [clientsId], references: [id])
  clientsId String?
  providers Users @relation("providerAppointments",fields: [providersId], references: [id])
  providersId String
  startDate DateTime
  endDate DateTime
  appointmentReasons AppointmentReasons? @relation(fields: [appointmentReasonsId], references: [id])
  appointmentReasonsId String?
  locations Locations @relation(fields: [locationsId], references: [id])
  locationsId String
  
  @@unique([startDate, endDate, providersId], map: "uniqueAppointmentCompositeKey")
}

model Locations {
  id String @id @default(uuid())
  address String @unique
  appointments Appointments[]
}

model AppointmentReasons {
  id String @id @default(uuid())
  reason String @unique
  description String
  priceInCents BigInt @default(1000)
  appointments Appointments[]
  appointmentInvoiceDetails AppointmentInvoiceDetails[]
}

model AppointmentInvoices {
  id String @id @default(uuid())
  invoiceDate DateTime @default(now())
  dueDate DateTime
  users Users @relation(fields: [usersId], references:[id])
  usersId String
  appointmentInvoiceDetails AppointmentInvoiceDetails[]
  appointmentPayments AppointmentPayments[]
}

model AppointmentInvoiceDetails {
  id String @id @default(uuid())
  quantity Int 
  lineTotalInCents BigInt
  appointmentInvoices AppointmentInvoices @relation(fields: [appointmentInvoiceId], references: [id])
  appointmentInvoiceId String
  appointmentReasons AppointmentReasons @relation(fields: [appointmentReasonsId], references: [id])
  appointmentReasonsId String
}

model AppointmentPayments {
  id String @id @default(uuid())
  amountPaidInCents BigInt
  transactionDate DateTime @default(now())
  appointmentInvoices AppointmentInvoices @relation(fields: [appointmentInvoiceId], references: [id])
  appointmentInvoiceId String
}

model Messages {
  id String @id @default(uuid())
  date DateTime @default(now())
  message String @db.VarChar(2000)
  sender Users @relation("senderMessage",fields: [senderId], references: [id])
  senderId String
  receiver Users @relation("receiverMessage",fields: [receiverId], references: [id])
  receiverId String
}